AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Deploys 1Password SCIM Bridge using AWS App Runner including the required available Redis cache as an Amazon ECS
  service. Provisions AWS secrets to store SCIM bridge credentials, a VPC with public and private subnets, internet
  gateway and NAT gateways, route tables, a VPC connector, security groups, and required IAM roles and policies.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - VPCCIDR
          # - ServiceDiscoveryNamespace
          - ProvisioningVolume
          - SCIMBridgeVersion
          - scimsession
      - Label:
          default: Google Workspace configuration (only for customers integrating with Workspace)
        Parameters:
          - WorkspaceCredentials
          - WorkspaceActor
          - BridgeAddress
    ParameterLabels:
      VPCCIDR:
        default: VPC CIDR
      # ServiceDiscoveryNamespace:
      #   default: Service Discovery namespace
      ProvisioningVolume:
        default: Provisioning volume
      SCIMBridgeVersion:
        default: 1Password SCIM Bridge version
      WorkspaceCredentials:
        default: Service account key
      WorkspaceActor:
        default: Actor
      BridgeAddress:
        default: SCIM bridge URL
Parameters:
  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: A CIDR block for the VPC to be created.
  # ServiceDiscoveryName:
  #   Type: String
  #   Default: op-scim-bridge
  #   Description: A name for the private DNS namespace for Service Discovery.
  ProvisioningVolume:
    Type: String
    Description: >-
      The expected volume of provisioning activity. Use base for provisioning less than 1,000 users, high for up to
      5,000 users, or very-high for more than 5,000 users.
    Default: base
    AllowedValues:
      - base
      - high
      - very-high
    ConstraintDescription: must be base, high, or very-high
  scimsession:
    Type: String
    Description: >-
      The plain text contents of the scimsession file created during the automated user provisioning setup in your
      1Password account.
    MinLength: 1
    ConstraintDescription: must not be empty
    NoEcho: true
  SCIMBridgeVersion:
    Type: String
    Default: v2.9.7
    Description: The version of 1Password SCIM Bridge to deploy.
  WorkspaceCredentials:
    Type: String
    Default: ""
    Description: >-
      The plain text contents of a Google Cloud service account key file to use for provisioning from Workspace.
    NoEcho: true
  WorkspaceActor:
    Type: String
    Default: ""
    Description: >-
      The email address of the Google Workspace administrator that the service account is acting on behalf of.
  BridgeAddress:
    Type: String
    # Default: ""
    Description: Your SCIM bridge URL to configure the connection from Google Workspace.
Rules:
  ValidateWorkspaceConfig:
    RuleCondition: !Not
      - Fn::EachMemberEquals:
          - - !Ref WorkspaceCredentials
            - !Ref WorkspaceActor
          - ""
    Assertions:
      - Assert: !Not [!Equals [!Ref WorkspaceCredentials, ""]]
        AssertDescription: The service account key is required to connect to Google Workspace.
      - Assert: !Not [!Equals [!Ref WorkspaceActor, ""]]
        AssertDescription: The actor email is required to connect to Google Workspace.
Mappings:
  InstanceConfiguration:
    base:
      Cpu: 256
      Memory: 512
    high:
      Cpu: 512
      Memory: 1024
    very-high:
      Cpu: 1024
      Memory: 1024
Conditions:
  UsingGoogleWorkspace: !Not
    - !Or
      - !Equals [!Ref WorkspaceCredentials, ""]
      - !Equals [!Ref WorkspaceActor, ""]
      # - !Equals [!Ref BridgeAddress, ""]
Resources:
  scimsessionSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      SecretString:
        Fn::Base64: !Ref scimsession
  WorkspaceSettingsSecret:
    Type: AWS::SecretsManager::Secret
    Condition: UsingGoogleWorkspace
    Properties:
      SecretString:
        Fn::Base64: !Sub |-
          {
            "actor":"${WorkspaceActor}",
            "bridgeAddress":"${BridgeAddress}"
          }
  WorkspaceCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Condition: UsingGoogleWorkspace
    Properties:
      SecretString:
        Fn::Base64: !Ref WorkspaceCredentials
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 0
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 16
          - 12
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 1
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 16
          - 12
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 2
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 16
          - 12
      AvailabilityZone: !Select
        - 0
        - !GetAZs
          Ref: AWS::Region
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select
        - 3
        - !Cidr
          - !GetAtt VPC.CidrBlock
          - 16
          - 12
      AvailabilityZone: !Select
        - 1
        - !GetAZs
          Ref: AWS::Region
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  NatGatewayIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
  NatGatewayIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
    DependsOn: InternetGatewayAttachment
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet1
      AllocationId: !GetAtt NatGatewayIP1.AllocationId
  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet2
      AllocationId: !GetAtt NatGatewayIP2.AllocationId
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
      DestinationCidrBlock: 0.0.0.0/0
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
  RouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  RouteTableAssociationPublic2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  RouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1
  RouteTableAssociationPrivate2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2
  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS traffic for 1Password SCIM Bridge.
      VpcId: !Ref VPC
  ECSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref ECSSecurityGroup
      Description: Redis traffic from App Runner service.
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      SourceSecurityGroupId: !Ref AppRunnerSecurityGroup
  ECSEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: HTTPS to Docker Hub, ECR, and CodeBuild.
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: App Runner service traffic for 1Password SCIM Bridge.
      VpcId: !Ref VPC
  AppRunnerEgress1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: To ECS service Redis.
      GroupId: !Ref AppRunnerSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379
      DestinationSecurityGroupId: !Ref ECSSecurityGroup
  AppRunnerEgress2:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: HTTPS to 1Password.
      GroupId: !Ref AppRunnerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  VPCConnector:
    Type: AWS::AppRunner::VpcConnector
    Properties:
      SecurityGroups:
        - !Ref AppRunnerSecurityGroup
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: >-
        Allow 1Password SCIM Bridge App Runner service instance to access secrets for SCIM bridge credentials.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - tasks.apprunner.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: op-scim-bridge-secret-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref scimsessionSecret
                  - !If
                    - UsingGoogleWorkspace
                    - !Ref WorkspaceCredentialsSecret
                    - !Ref AWS::NoValue
                  - !If
                    - UsingGoogleWorkspace
                    - !Ref WorkspaceSettingsSecret
                    - !Ref AWS::NoValue
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildECRAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                Resource: !GetAtt ECRRepository.Arn
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: DockerHubToECR
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_REGION
            Value: !Ref AWS::Region
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: IMAGE_TAG
            Value: !Ref SCIMBridgeVersion
          - Name: REPO_NAME
            Value: !Ref ECRRepository
          - Name: REPO_URI
            Value: !GetAtt ECRRepository.RepositoryUri
      Source:
        Type: NO_SOURCE
        BuildSpec: |-
          version: 0.2
          phases:
            pre_build:
              commands:
                - aws ecr get-login-password --region "$AWS_REGION" |
                  docker login --username AWS --password-stdin "$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com"
            build:
              commands:
                - docker pull "1password/scim:$IMAGE_TAG"
                - docker tag "1password/scim:$IMAGE_TAG" "$REPO_URI:$IMAGE_TAG"
            post_build:
              commands:
                - docker push "$REPO_URI:$IMAGE_TAG"
      Artifacts:
        Type: NO_ARTIFACTS
  ECSCluster:
    Type: AWS::ECS::Cluster
    DependsOn: TaskExecutionRole
    Properties:
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - arn:aws:logs:*:*:*
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: 1password/scim
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECSTaskAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:DescribeImages
                Resource: !GetAtt ECRRepository.Arn
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn
  ServiceDiscoveryNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Description: AWS Cloud Map private DNS namespace for 1Password SCIM Bridge.
      Vpc: !Ref VPC
      Name: op-scim-bridge
  RedisService:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - TTL: 60
            Type: A
      HealthCheckCustomConfig:
        FailureThreshold: 1
      Name: redis
      NamespaceId: !Ref ServiceDiscoveryNamespace
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: op-scim-bridge
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      ContainerDefinitions:
        - Name: image-sync
          Essential: false
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: IMAGE_TAG
              Value: !Ref SCIMBridgeVersion
            - Name: REPO_NAME
              Value: !Ref ECRRepository
            - Name: CODEBUILD_PROJECT
              Value: !Ref CodeBuildProject
          Image: amazon/aws-cli
          EntryPoint:
            - /bin/bash
            - -c
          Command:
            - |-
              echo "Checking if image tag $IMAGE_TAG already exists in $REPO_NAME..." &&
              aws ecr describe-images \
                --repository-name "$REPO_NAME" --image-ids imageTag="$IMAGE_TAG" \
                --query imageDetails[].imageTags[] --output text > image_check 2>&1 ;
              if ! grep -q "ImageNotFoundException" image_check && ! grep -q "$IMAGE_TAG" image_check; then
                cat image_check
                exit 1
              elif grep -q "ImageNotFoundException" image_check; then
                echo "$IMAGE_TAG not found in $REPO_NAME. Triggering CodeBuild..."
                aws codebuild start-build --project-name "$CODEBUILD_PROJECT" \
                  --environment-variables-override name=IMAGE_TAG,value="$IMAGE_TAG" \
                  --region "$AWS_REGION" --output text
              else
                echo "$IMAGE_TAG already exists in $REPO_NAME. Exiting."
              fi
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref ECSLogGroup
              awslogs-stream-prefix: ecs/op-scim-bridge
        - Name: redis
          DependsOn:
            - ContainerName: image-sync
              Condition: SUCCESS
          Cpu: 256
          Memory: 512
          Image: redis
          User: redis:redis
          Command:
            - --maxmemory 256mb
            - --maxmemory-policy volatile-lru
            - --save ""
          PortMappings:
            - ContainerPort: 6379
          HealthCheck:
            Command:
              - CMD-SHELL
              - redis-cli ping | grep PONG
            StartPeriod: 5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref ECSLogGroup
              awslogs-stream-prefix: ecs/op-scim-bridge
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
      ServiceRegistries:
        - ContainerName: redis
          RegistryArn: !GetAtt RedisService.Arn
  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Allow App Runner service to access private Amazon ECR images.
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: build.apprunner.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSAppRunnerServicePolicyForECRAccess
  AutoScalingConfiguration:
    Type: AWS::AppRunner::AutoScalingConfiguration
    Properties:
      MaxSize: 1
      MinSize: 1
  AppRunnerService:
    Type: AWS::AppRunner::Service
    DependsOn: ECSService
    Properties:
      AutoScalingConfigurationArn: !Ref AutoScalingConfiguration
      SourceConfiguration:
        AutoDeploymentsEnabled: false
        ImageRepository:
          ImageIdentifier: !Sub ${ECRRepository.RepositoryUri}:${SCIMBridgeVersion}
          ImageConfiguration:
            Port: 3002
            RuntimeEnvironmentVariables:
              - Name: OP_REDIS_URL
                Value: !Sub redis://${RedisService.Name}.op-scim-bridge:6379
            RuntimeEnvironmentSecrets:
              - Name: OP_SESSION
                Value: !Ref scimsessionSecret
              - !If
                - UsingGoogleWorkspace
                - Name: OP_WORKSPACE_CREDENTIALS
                  Value: !Ref WorkspaceCredentialsSecret
                - !Ref AWS::NoValue
              - !If
                - UsingGoogleWorkspace
                - Name: OP_WORKSPACE_SETTINGS
                  Value: !Ref WorkspaceSettingsSecret
                - !Ref AWS::NoValue
          ImageRepositoryType: ECR
        AuthenticationConfiguration:
          AccessRoleArn: !GetAtt AccessRole.Arn
      InstanceConfiguration:
        Cpu: !FindInMap
          - InstanceConfiguration
          - !Ref ProvisioningVolume
          - Cpu
        Memory: !FindInMap
          - InstanceConfiguration
          - !Ref ProvisioningVolume
          - Memory
        InstanceRoleArn: !GetAtt InstanceRole.Arn
      NetworkConfiguration:
        IngressConfiguration:
          IsPubliclyAccessible: true
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !Ref VPCConnector
Outputs:
  SCIMBridgeURL:
    Description: >-
      The URL for your SCIM bridge. Use this and your bearer token to connect your identity provider to 1Password.
    Value: !Sub https://${AppRunnerService.ServiceUrl}
