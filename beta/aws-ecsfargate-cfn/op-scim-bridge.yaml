AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Deploys 1Password SCIM Bridge using Amazon ECS and AWS Fargate. Provisions and
  configures a VPC, 2 public subnets, an internet gateway, a route table, an
  ALB, an ACM certificate, Route 53 DNS records, an AWS secret to store
  credentials for your SCIM bridge, security groups, and required IAM roles.

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Parameters:
          - ExistingVPC
          - VPCCIDR
          - ExistingPublicSubnet1
          - ExistingPublicSubnet2
          - Route53HostedZoneID
          - ProvisioningVolume
          - DomainName
          - SCIMBridgeVersion
          - scimsession
      - Label:
          default: >-
            Workspace configuration (only for customers integrating with Google Workspace)
        Parameters:
          - WorkspaceCredentials
          - WorkspaceActor
    ParameterLabels:
      ExistingVPC:
        default: "Existing VPC (Optional)"
      VPCCIDR:
        default: "VPC CIDR"
      ExistingPublicSubnet1:
        default: "Existing Public Subnet 1 (if using existing VPC)"
      ExistingPublicSubnet2:
        default: "Existing Public Subnet 2 (if using existing VPC)"
      Route53HostedZoneID:
        default: "Route 53 hosted zone"
      ProvisioningVolume:
        default: "Provisioning volume"
      DomainName:
        default: "1Password SCIM Bridge domain name"
      SCIMBridgeVersion:
        default: "1Password SCIM Bridge version"
      WorkspaceCredentials:
        default: "Service account key"
      WorkspaceActor:
        default: "Actor"

Parameters:
  ExistingVPC:
    Type: String
    Default: ""
    Description: "(Optional) Select an existing VPC. Leave blank to create a new VPC."
  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
    Description: A CIDR block for the VPC to be created.
  ExistingPublicSubnet1:
    Type: String
    Default: ""
    Description: "(Optional) Select an existing Public Subnet 1 if using an existing VPC."
  ExistingPublicSubnet2:
    Type: String
    Default: ""
    Description: "(Optional) Select an existing Public Subnet 2 if using an existing VPC."
  Route53HostedZoneID:
    Type: String
    Default: ""
    Description: "(Optional) Route 53 Hosted Zone ID for DNS validation. Leave blank if using external DNS provider."
  ProvisioningVolume:
    Type: String
    Description: >-
      The expected volume of provisioning activity. Use base for provisioning less than 1,000 users, high for up to
      5,000 users, or very-high for more than 5,000 users.
    Default: base
    AllowedValues:
      - base
      - high
      - very-high
    ConstraintDescription: must be base, high, or very-high
  DomainName:
    Type: String
    Default: scim.example.com
    Description: >-
      A fully qualified domain name for your SCIM bridge that is in the domain of the selected Route 53 hosted zone
      where the record will be created.
  scimsession:
    Type: String
    Description: >-
      The plain text contents of the scimsession file created during the automated user provisioning setup in your
      1Password account.
    MinLength: "1"
    ConstraintDescription: "must not be empty"
    NoEcho: true
  SCIMBridgeVersion:
    Type: String
    Default: "v2.9.6"
    Description: >-
      The tag of the 1Password SCIM Bridge image to pull from Docker Hub.
  WorkspaceCredentials:
    Type: String
    Default: ""
    Description: >-
      The plain text contents of the key file associated with the service account for Google Workspace.
    NoEcho: true
  WorkspaceActor:
    Type: String
    Default: ""
    Description: >-
      The email address of the Google Workspace administrator that the service account is acting on behalf of.

Conditions:
  CreateNewVPC: !Equals [!Ref ExistingVPC, ""]
  CreateRoute53Records: !Not [!Equals [!Ref Route53HostedZoneID, ""]]
  UsingGoogleWorkspace: !Not
    - !Or
      - !Equals [!Ref WorkspaceCredentials, ""]
      - !Equals [!Ref WorkspaceActor, ""]

Mappings:
  CpuScale:
    base:
      SCIMBridge: 128
      Redis: 128
      Task: 256
    high:
      SCIMBridge: 512
      Redis: 128
      Task: 1024
    very-high:
      SCIMBridge: 1024
      Redis: 128
      Task: 2048
  MemoryScale:
    base:
      SCIMBridge: 512
      Redis: 512
      Task: 1024
    high:
      SCIMBridge: 1024
      Redis: 512
      Task: 2048
    very-high:
      SCIMBridge: 1024
      Redis: 512
      Task: 4096

Resources:
  VPC:
    Condition: CreateNewVPC
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Condition: CreateNewVPC
    Properties:
      AvailabilityZone:
        "Fn::Select":
          - 0
          - "Fn::GetAZs":
              Ref: "AWS::Region"
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPC]
      CidrBlock:
        "Fn::Select":
          - 0
          - "Fn::Cidr":
              - !GetAtt VPC.CidrBlock
              - 16
              - 12

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Condition: CreateNewVPC
    Properties:
      AvailabilityZone:
        "Fn::Select":
          - 1
          - "Fn::GetAZs":
              Ref: "AWS::Region"
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPC]
      CidrBlock:
        "Fn::Select":
          - 1
          - "Fn::Cidr":
              - !GetAtt VPC.CidrBlock
              - 16
              - 12

  InternetGateway:
    Condition: CreateNewVPC
    Type: "AWS::EC2::InternetGateway"

  GatewayAttachment:
    Condition: CreateNewVPC
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  
  RouteTable:
    Condition: CreateNewVPC
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC

  Route:
    Condition: CreateNewVPC
    Type: "AWS::EC2::Route"
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Condition: CreateNewVPC
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  PublicSubnet2RouteTableAssociation:
    Condition: CreateNewVPC
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  scimsessionSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      SecretString: !Base64
        Ref: scimsession

  ECSCluster:
    Type: "AWS::ECS::Cluster"
    DependsOn: ExecutionRole
    Properties:
      CapacityProviders:
        - FARGATE
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  ECSTaskDefinition:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      RequiresCompatibilities:
        - FARGATE
      NetworkMode: awsvpc
      Cpu: !FindInMap
        - CpuScale
        - !Ref ProvisioningVolume
        - Task
      Memory: !FindInMap
        - MemoryScale
        - !Ref ProvisioningVolume
        - Task
      Volumes:
        - Name: redis-config
        - Name: opuser-data
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: op-scim-bridge
          Cpu: !FindInMap
            - CpuScale
            - !Ref ProvisioningVolume
            - SCIMBridge
          Memory: !FindInMap
            - MemoryScale
            - !Ref ProvisioningVolume
            - SCIMBridge
          Image: !Sub "1password/scim:${SCIMBridgeVersion}"
          PortMappings:
            - ContainerPort: 3002
              HostPort: 3002
              Protocol: tcp
          Essential: true
          DependsOn:
            - ContainerName: redis
              Condition: HEALTHY
          Secrets:
            - Name: OP_SESSION
              ValueFrom: !Ref scimsessionSecret
          MountPoints:
            - ContainerPath: /home/opuser
              SourceVolume: opuser-data
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref "AWS::Region"
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref LogStream
        - Name: redis
          Cpu: !FindInMap
            - CpuScale
            - !Ref ProvisioningVolume
            - Redis
          Memory: !FindInMap
            - MemoryScale
            - !Ref ProvisioningVolume
            - Redis
          Image: "redis:latest"
          PortMappings:
            - ContainerPort: 6379
              HostPort: 6379
              Protocol: tcp
          HealthCheck:
            Command:
              - "CMD-SHELL"
              - "redis-cli ping | grep PONG"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref "AWS::Region"
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: !Ref LogStream

  LogGroup:
    Type: "AWS::Logs::LogGroup"

  LogStream:
    Type: "AWS::Logs::LogStream"
    Properties:
      LogGroupName: !Ref LogGroup

  ECSService:
    Type: "AWS::ECS::Service"
    DependsOn: HTTPSListener
    Properties:
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - !If [CreateNewVPC, !Ref PublicSubnet1, !Ref ExistingPublicSubnet1]
            - !If [CreateNewVPC, !Ref PublicSubnet2, !Ref ExistingPublicSubnet2]
          SecurityGroups:
            - !Ref ServiceSecurityGroup
      LoadBalancers:
        - ContainerName: op-scim-bridge
          ContainerPort: 3002
          TargetGroupArn: !Ref TargetGroup

      HealthCheckGracePeriodSeconds: !If
        - CreateRoute53Records
        - 60
        - !Ref "AWS::NoValue"

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /ping
      Matcher:
        HttpCode: "200,301,302"
      HealthCheckTimeoutSeconds: 5
      UnhealthyThresholdCount: 2
      HealthyThresholdCount: 2
      Port: 3002
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: 60
      TargetType: ip
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPC]

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Scheme: internet-facing
      Subnets:
        - !If [CreateNewVPC, !Ref PublicSubnet1, !Ref ExistingPublicSubnet1]
        - !If [CreateNewVPC, !Ref PublicSubnet2, !Ref ExistingPublicSubnet2]
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  LoadBalancerSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Allow public HTTPS ingress to the load balancer from the identity
        provider, restrict egress to the VPC for 1Password SCIM Bridge
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPC]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 3002
          ToPort: 3002
          CidrIp: !GetAtt VPC.CidrBlock

  ServiceSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: >-
        Restrict ingress to ECS Service from load balancer, allow egress to
        1Password.com for 1Password SCIM Bridge.
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPC]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3002
          ToPort: 3002
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  HTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref TLSCertificate

  TaskRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: cloudwatch_logging
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: vpc_access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
        - PolicyName: task_execution_role_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: "*"

  ExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ""
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: secrets_manager_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "secretsmanager:GetSecretValue"
                Resource:
                  - !Ref scimsessionSecret
        - PolicyName: cloudwatch_logging_policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                Resource: 
                  - arn:aws:logs:*:*:*

  DNSRecord:
    Condition: CreateRoute53Records
    Type: "AWS::Route53::RecordSet"
    Properties:
      HostedZoneId: !Ref Route53HostedZoneID
      Comment: DNS record pointing to load balancer for 1Password SCIM Bridge
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID

  TLSCertificate:
    Type: "AWS::CertificateManager::Certificate"
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions: !If
        - CreateRoute53Records
        - 
          - DomainName: !Ref DomainName
            HostedZoneId: !Ref Route53HostedZoneID
        - !Ref "AWS::NoValue"

Outputs:
  SCIMBridgeURL:
    Description: >-
      The URL for your SCIM bridge. Use this and your bearer token to connect
      your identity provider to 1Password.
    Value: !If
      - CreateRoute53Records
      - !Sub "https://${DNSRecord}"
      - !Sub "https://${DomainName}"

  SelectedVPC:
    Description: "The VPC used for the SCIM Bridge."
    Value: !If
      - CreateNewVPC
      - !Ref VPC
      - !Ref ExistingVPC
